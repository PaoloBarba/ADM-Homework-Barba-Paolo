# -*- coding: utf-8 -*-
"""Homework1-Barba-Paolo-Problem 1-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t_wbMuyF8qlnFQhKXvtLfV0508ASg5Fa

# Introduction

Say "Hello, World!" With Python
"""

print("Hello, World!")

"""Python If-Else"""

import math
import os
import random
import re
import sys



if __name__ == '__main__':
    n = int(input().strip())
    if n % 2 != 0:
        print('Weird')
    elif n >= 2 and n <= 5:
        print('Not Weird')
    elif n >= 6 and n <= 20:
        print('Weird')
    elif n > 20 :
        print('Not Weird')

"""Python: Division


"""

if __name__ == '__main__':
    a = int(input())
    b = int(input())
    print(a//b)
    print(a/b)

"""Loops"""

if __name__ == '__main__':
    n = int(input())
    for i in range(n):
        print(i**2)

"""Write a function


"""

def is_leap(year):
    leap = False
    # Write your logic here
    if year % 4 == 0:
        leap= True
    if year % 100 == 0:
        leap=False
    if year %400 == 0:
        leap=True   
    return leap

year = int(input())
print(is_leap(year))

"""Print Function


"""

if __name__ == '__main__':
    n = int(input())
    a=""
    for i in range(1,n+1):
        a = a +  str(i)
    print(a)

"""itertools.combinations_with_replacement()"""

from itertools import combinations_with_replacement
S,k=input().split()
S=sorted(S)
a=list(combinations_with_replacement(S,int(k)))
a.sort()
for x in a:
    print("".join(x))

"""Arithmetic Operators


"""

if __name__ == '__main__':
    a = int(input())
    b = int(input())
    print(a+b)
    print(a-b)
    print(a*b)

"""# Basic Data Types

List Comprehensions
"""

if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    l=[[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if sum([i,j,k])!=n ]
    print(l)

"""Find the Runner-Up Score!


"""

if __name__ == '__main__':
    n = int(input())
    arr = list(map(int, input().split()))
    w=max(arr)
    l=[]
    for x in arr:
        if x != w:
            l.append(x)
    print(max(l))

"""Nested Lists


"""

if __name__ == '__main__':
    import math
    l1=[]
    l2=[]
    l3=[]
    student=[]
    for _ in range(int(input())):
        name = input()
        score = float(input())
        l1.append(name)
        l2.append(score)
        l3.append([name,score])
    minimum=math.inf
    second=math.inf
    for x in l2:
        if x< minimum:
            minimum=x
    for x in l2:
        if x> minimum and x < second:
            second=x
    for x in l3:
        if x[1]== second:
            student.append(x[0])
    student.sort()
    for x in student:
        print(x)

"""Finding the percentage


"""

if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()
    somma=0
    c=0
    for x in student_marks[query_name]:
        somma += x
        c += 1
    print(format(somma/c , '.2f'))

"""Lists"""

if __name__ == '__main__':
    N = int(input())
    l=[]
    for i in range(N):
        n = input().split()
        if n[0] == 'insert':
            l.insert(int(n[1]),int(n[2]))
        if n[0] == 'print':
            print(l)
        if n[0] == 'remove':
            l.remove(int(n[1]))
        if n[0] == 'append':
            l.append(int(n[1]))
        if n[0] =='sort':
            l.sort()
        if n[0] =='pop':
            l.pop()
        if n[0] == 'reverse':
            l.reverse()

"""Tuples"""

if __name__ == '__main__':
    n = int(input())
    integer_list = map(int, input().split())
    t=tuple(integer_list)
    print(hash(t))

"""# Strings

sWAP cASE
"""

def swap_case(s):
    l=s.lower()
    u=s.upper()
    new=''
    for i in range(len(s)):
        if s[i] == l[i]:
            new += s[i].upper()
        elif s[i] == u[i]:
            new  += s[i].lower()
        else:
          new += s[i]
    return new


if __name__ == '__main__':
    s = input()
    result = swap_case(s)
    print(result)

"""String Split and Join


"""

def split_and_join(line):
    # write your code here
    line= line.split(" ")
    line= "-".join(line)
    return line


if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)

"""What's Your Name?


"""

def print_full_name(first, last):
    # Write your code here
    print(f"Hello {first} {last}! You just delved into python." )



if __name__ == '__main__':
    first_name = input()
    last_name = input()
    print_full_name(first_name, last_name)

"""Mutations"""

def mutate_string(string, position, character):
    l=list(string)
    l[position]= character
    l = "".join(l)
    return l

"""Find a string


"""

def count_substring(string, sub_string):
    n=0
    occ=0
    for i in range(len(string) - len(sub_string)+1):
        if string[i] == sub_string[0]:
            for j in range(len(sub_string)):
                if sub_string[j] == string[i+j]:
                    occ = 1
                else:
                    occ=0
                    break
        n += occ  
        occ=0
                    
    return n
if __name__ == '__main__':
    string = input().strip()
    sub_string = input().strip()
    
    count = count_substring(string, sub_string)
    print(count)

"""String Validators


"""

if __name__ == '__main__':
    s = input()
    alphanumeric=False
    alphabetical= False
    digit=False
    lower=False
    upper=False
    for i in range(len(s)):
        if s[i].isalnum():
            alphanumeric=True
        if s[i].isalpha():
            alphabetical=True
        if s[i].isdigit():
            digit=True
        if s[i].islower():
            lower=True
        if s[i].isupper():
            upper=True
    print(alphanumeric)
    print(alphabetical)
    print(digit)
    print(lower)
    print(upper)

"""Text Alignment


"""

thickness = int(input()) #This must be an odd number
c = 'H'

#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))    

#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))    

#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))

"""Text Wrap


"""

import textwrap

def wrap(string, max_width):
    l=list(string)
    
    for i in range(0,len(l),max_width +1):
        l.insert(i+ max_width,'\n')
    
    return "".join(l)





if __name__ == '__main__':
    string, max_width = input(), int(input())
    result = wrap(string, max_width)
    print(result)

"""Designer Door Mat


"""

n,m = map(int,input().split())
one = int((n-1)/2)

for i in range(one):
    print(("-")*((one*3)-(3*i)) + ".|."*((2*i)+1) + ("-")*((one*3)-(3*i)))
print("WELCOME".center(m,"-"))
for j in range(one):
    print(("-")*((j*3)+3) + ".|."*((n-2)-(j*2))+ ("-")*((j*3)+3))

"""String Formatting


"""

def print_formatted(number):
    q = len(bin(number))-2
    for i in range(1,number+1):
        decimal=str(i)
        octal=oct(i)[2:]
        hexadecimal=hex(i)[2:].upper()
        binary=bin(i)[2:]
        print(decimal.rjust(q), octal.rjust(q), hexadecimal.rjust(q), binary.rjust(q))
      
       
if __name__ == '__main__':
    n = int(input())
    print_formatted(n)

"""Alphabet Rangoli


"""

def print_rangoli(size):
    # your code goes here
    alph = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')
    
    mid = list(alph[1:size])
    mid = mid[::-1] + ['a'] + mid
       
    width = size+3*(size-1)
    
    string = ""
    for i in reversed(range(1,size)):
        s = "-".join(mid).center(width, '-')+'\n'
        string += s
        mid.pop(i)
        mid.pop(i)

    string += (mid[0]).center(width, '-')

    print(string[::-1]+string[width:])
if __name__ == '__main__':

"""Capitalize!


"""

import math
import os
import random
import re
import sys
def solve(s):
    new=list(s)
    new[0]=new[0].upper()
    for i in range (len(new)):
        if new[i] ==" ":
            new[i+1]=new[i+1].upper() 
    return "".join(new)


if __name__ == '__main__':

"""The Minion Game


"""

def minion_game(string):
    # your code goes here
    vowels=["A","E", "I", "O" , "U"]
    Kevin=0
    Stuart=0
    i=1
    string=list(string)
    string.reverse()
    for x in string:
        if x in vowels: 
            Kevin += i
        else:
            Stuart += i
        i += 1
    if Kevin > Stuart:
        print("Kevin " + str(Kevin))
    if Stuart > Kevin:
        print("Stuart " + str(Stuart))
    if Stuart== Kevin:
        print("Draw")
    
if __name__ == '__main__':
    s = input()
    minion_game(s)

"""Merge the Tools!


"""

def merge_the_tools(string, k):
    l=list(string)
    for i in range(0,len(l), k):
       s=l[i:k+i]
       output = []
       for x in s:
         if x not in output:
           output.append(x)
       print("".join(output))

if __name__ == '__main__':
    string, k = input(), int(input())
    merge_the_tools(string, k)

"""#Sets

Introduction to Sets
"""

def average(array):
    # your code goes here
    somma=sum(set(array))
    average= somma/len(set(array))
    return(round(average,3))

if __name__ == '__main__':
    n = int(input())
    arr = list(map(int, input().split()))
    result = average(arr)
    print(result)

"""Symmetric Difference


"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
M = int(input())
a = set(list(map(int, input().split())))
N = int(input())
b = set(list(map(int, input().split())))
c =  a.difference(b) 
d =  b.difference(a)
e = c.union(d)
l = []
for x in e:
    l.append(x)
l.sort()
for x in l:
    print(x)

"""Symmetric Difference


"""

M = int(input())
a = set(list(map(int, input().split())))
N = int(input())
b = set(list(map(int, input().split())))
c =  a.difference(b) 
d =  b.difference(a)
e = c.union(d)
l = []
for x in e:
    l.append(x)
l.sort()
for x in l:
    print(x)

"""No Idea!


"""

happiness=0
n, m = map(int, input().split())
arr_= list(map(int, input().split()))
A = set(map(int, input().split()))
B = set(map(int, input().split()))
for x in arr_:
    if x in A:
        happiness += 1
    if x in B:
        happiness -= 1
print(happiness)

"""Set .add()


"""

n= int(input())
s= set()
for i in range(n):
    s.add(input())
print(len(s))

"""Set .discard(), .remove() & .pop()


"""

n = int(input())
s = set(map(int, input().split()))

N= int(input())
for i in range(N):
    cmd= input().split()
    if cmd[0] == "pop":
        s.pop()
    elif cmd[0] == "remove":
        s.remove(int(cmd[1]))
    elif cmd[0] == "discard":
        s.discard(int(cmd[1]))  
print(sum(s))

"""Set .union() Operation


"""

n=int(input())
eng= set(map(int,input().split()))
b=int(input())
fre=set(map(int,input().split()))

total= eng.union(fre)
print(len(total))

"""Set .intersection() Operation


"""

n=int(input())
eng=set(map(int,input().split()))
b=int(input())
fre=set(map(int,input().split()))

intersection=eng.intersection(fre)
print(len(intersection))

"""Set .difference() Operation


"""

n=int(input())
eng=set(map(int,input().split()))
b=int(input())
fre= set(map(int, input().split()))

diff=eng.difference(fre)
print(len(diff))

"""Set .symmetric_difference() Operation


"""

n=int(input())
eng= set(map(int,input().split()))
b=int(input())
fre= set(map(int, input().split()))
sym=eng.symmetric_difference(fre)
print(len(sym))

"""Set Mutations


"""

n=int(input())
s=set(map(int,input().split()))
n_cmd=int(input())
for i in range(n_cmd):
    comm = input().split()
    S= set(map(int,input().split()))
    if comm[0] ==  "intersection_update" :
        s &= S
    if comm[0] == "update":
        s |= S
    if comm[0] == "symmetric_difference_update":
        s ^= S
    if comm[0] == "difference_update":
        s -= S 
        
print(sum(s))

"""The Captain's Room


"""

n=int(input())
s=list(input().split())
dic={}
for x in s:
    if x in dic:
        dic[x] += 1
    else:
        dic[x] = 1
for k, v in dic.items():
    if v==1:
        print(k)

"""Check Subset


"""

n=int(input())
for i in range(n):
    n_a=int(input())
    a=set(map(int,input().split()))
    n_b=int(input())
    b=set(map(int,input().split()))
    if a.intersection(b) == a:
        print(True)
    else:
        print(False)

"""Check Strict Superset


"""

A= set(map(int, input().split()))
n= int(input())
super_set=True
for i in range(n):
    b=set(map(int, input().split()))
    if len(A.intersection(b)) != len(b):
        super_set=False
print(super_set)

"""# Collections

collections.Counter()
"""

n_shoes= int(input())
mylist=list(map(int,input().split()))
n_cust= int(input())
amount=0
for i in range(n_cust):
    cust=list(map(int,input().split()))
    if cust[0] in mylist:
        amount += cust[1]
        mylist.remove(cust[0])
print(amount)

"""DefaultDict Tutorial


"""

from collections import defaultdict
n , m = map(int,input().split())  
d= defaultdict(list)
for i in range(n):
    d[input()].append(i+1)
for i in range(m):
    b=input()
    if b in d:
        print(" ".join(map(str, d[b])))
        
    else:
        print(-1)

"""Collections.namedtuple()


"""

from collections import namedtuple
n=int(input())
names= namedtuple('names', input().split())
s=0
for i in range(n):
    st=  names(*(input().split()))
    s+= int(st.MARKS)
print(s/n)

"""Collections.OrderedDict()


"""

from collections import OrderedDict
n=int(input())
ordinary_dictionary = {}
for i in range(n):
    it= input().split()
    
    if " ".join(it[:-1]) not in ordinary_dictionary:
        ordinary_dictionary[" ".join(it[:-1])] = int(it[-1])
    else:
        ordinary_dictionary[" ".join(it[:-1])] += int(it[-1])
for x in ordinary_dictionary:
    print(x, ordinary_dictionary[x])

"""Word Order


"""

n=int(input())
dic={}
for i in range(n):
    word=input()
    if word not in dic:
        dic[word]=1
    else:
        dic[word] += 1

print(len(dic))

for  v in dic.values():
    print(v, end=" ")

"""Collections.deque()


"""

from collections import deque
n=int(input())
d = deque()
for i in range(n):
    ist=input().split()
    if ist[0]== "append":
        d.append(ist[1])
    if ist[0]== "appendleft":
        d.appendleft(ist[1])
    if ist[0]== "pop":
        d.pop()
    if ist[0]=="popleft":
        d.popleft()
for x in d:
    print(x, end= " ")

"""Company Logo


"""

import math
import os
import random
import re
import sys



if __name__ == '__main__':
    from collections import Counter
    s=input()
    l= Counter(sorted(s)).most_common(3)
    for a, b in l:
        print(a,b)

"""Piling Up!


"""

t = int(input())
for i in range(t):
    n = int(input())
    block = list(map(int, input().split()))
    r='Yes'
    for j in range(1,len(block)-1):
        if block[j] > block[j-1] and block[j] > block[j+1]:
            r='No'
            break
    print(r)

"""#Date and Time

Calendar Module
"""

import calendar
m,d,y=map(int,input().split())
c=calendar.weekday(y,m,d)
print(calendar.day_name[c].upper())

"""Time Delta


"""

import math
import os
import random
import re
import sys

# Complete the time_delta function below.

from datetime import datetime

def time_delta(t1, t2):
    fmt = "%a %d %b %Y %H:%M:%S %z"
    time1 = datetime.strptime(t1, fmt)
    time2 = datetime.strptime(t2, fmt)
    return str(abs(int((time1 - time2).total_seconds())))
        

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input())

    for t_itr in range(t):
        t1 = input()

        t2 = input()

        delta = time_delta(t1, t2)

        fptr.write(delta + '\n')

    fptr.close()

"""#Errors and Exceptions

Exceptions
"""

n=int(input())
for i in range(n):
    try:
        a,b= map(int,input().split())
        print(a//b) 
    except Exception as e:
        print ("Error Code:",e)

"""# Built-Ins

Zipped!
"""

n,m  = map(int,input().split())
s = []
for _ in range(m):
    scores = list(map(float, input().split()))
    s.append(scores)

for x in zip(*s):
    print(sum(x)/m)

"""Athlete Sort


"""

import math
import os
import random
import re
import sys


n,m= map(int,input().split())
db=[]
for i in range(n):
    x=list(map(int,input().split()))
    db.append(x)
k=int(input())
for i in sorted(db, key=lambda x:x[k]):
    print(*i)

"""ginortS


"""

import string
s= input()
lc=[]
uc=[]
on=[]
en=[]
for x in s:
    if x in list(string.ascii_lowercase):
        lc.append(x)
    elif x in list(string.ascii_uppercase):
        uc.append(x)
    elif int(x) % 2 !=0:
        on.append(x)
    else:
        en.append(x)
lc.sort()
uc.sort()
on.sort()
en.sort()
a= lc + uc + on + en
print("".join(a))

"""#Python Functionals

Map and Lambda Function
"""

cube = lambda x:x**3 # complete the lambda function 

def fibonacci(n):
    f = [0, 1]
    fib=[]
    for i in range(n):
        fib.append(f[0])
        f[0],f[1]=f[1],f[1] +f[0]
    return fib

if __name__ == '__main__':
    n = int(input())
    print(list(map(cube, fibonacci(n))))

"""#Regex and Parsing challenges

In order to do this task I have often check the solutions provide by Hacker rank

Detect Floating Point Number
"""

import re
t=int(input())
for i in range(t):
    s=input()
    try:
        float(s)
        x = re.match(r"^[-+]?[0-9]*\.[0-9]+$", s)
        print(bool(x))
    except:
        print("False")

"""Re.split()


"""

regex_pattern = r"[,.]"


import re

# Enter your code here. Read input from STDIN. Print output to STDOUT
import re
m = re.findall(r'^\w+',str(input()))
print(m)

"""Group(), Groups() & Groupdict()


"""

import re
m = re.search(r"([a-z0-9A-Z])\1", input())
if m == None:
    print(-1)
else:
    print(m.groups()[0])

"""Re.findall() & Re.finditer()


"""

import re
pattern = re.compile(r"(?<![AEIOU])([AEIOU]{2,})(?![AEIOU]).", re.I)
fi = pattern.findall(input())
if fi:
    print(*fi, sep='\n')
else:
    print(-1)

"""Re.start() & Re.end()


"""

import re
string= input()
pattern = re.compile(input())
match = pattern.search(string)
if not match: print("(-1, -1)")
while match:
    print(f"({match.start()}, {match.end()-1})")
    match = pattern.search(string,match.start() + 1)

"""Regex Substitution


"""

import re
for i in range(int(input())):
    s = re.sub("(?<=\s)&&(?=\s)", "and", input())
    print(re.sub("(?<=\s)\|\|(?=\s)", "or", s))

"""Validating Roman Numerals


"""

regex_pattern = r"(M{0,3})(C[DM]|D?C{0,3})(X[LC]|L?X{0,3})(I[VX]|V?I{0,3})$"    # Do not delete 'r'.
import re
print(str(bool(re.match(regex_pattern, input()))))

"""Validating phone numbers


"""

import re
pat = r"^[789][0-9]{9}$"
n=int(input())
for i  in range(n):
    if re.search(pat, input()):
        print('YES')
    else:
        print('NO')

"""Validating and Parsing Email Addresses


"""

import re
pattern = re.compile(r"<[a-z][a-zA-Z0-9\-\.\_]+\@[a-zA-Z]+\.[a-zA-Z]{1,3}>")
for a in range(int(input())):
    b = input().split()
    c = pattern.search(b[1])
    if c:
        print(b[0], c.string)

"""Hex Color Code


"""

import re
p = r'[^^](#[\da-fA-F]{3}\b|#[\da-fA-F]{6}\b)'
for _ in range(int(input())):
    s = input()
    ms = re.findall(p, s)
    if len(ms):
        for m in ms:
            print(m)

"""HTML Parser - Part 1


"""

from html.parser import HTMLParser
class HtmlParser(HTMLParser):

    def handle_starttag(self, tag, attrs):
        print(f"Start : {tag}")
        if attrs:
            for name, val in attrs:
                print(f"-> {name} > {val}")

    def handle_endtag(self, tag):
        print(f"End   : {tag}")

    def handle_startendtag(self, tag, attrs):
        print(f"Empty : {tag}")
        if attrs:
            for name, val in attrs:
                print(f"-> {name} > {val}")

parser = HtmlParser()
n = int(input())
data = "".join(input() for _ in range(n))
parser.feed(data)

"""HTML Parser - Part 2


"""

from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_comment(self, data):
        if data != '\n':
            if "\n" in data:
                print(">>> Multi-line Comment")
                print(data)
            else:
                print(">>> Single-line Comment")
                print(data)
    def handle_data(self, data):
        if not data == '\n':
            print(f">>> Data")
            print(data)
            
html = ""       
for i in range(int(input())):
    html += input().rstrip()
    html += '\n'
    
parser = MyHTMLParser()
parser.feed(html)
parser.close()

"""Detect HTML Tags, Attributes and Attribute Values


"""

from html.parser import HTMLParser
class CustomHtmlParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print(tag)
        for ele in attrs:
            print("->", ele[0], ">", ele[1])


parser = CustomHtmlParser()
for _ in range(int(input())):
    parser.feed(input())

"""Validating UID


"""

import re
t=int(input())
for _ in range(t):
    uid=input()
    if (uid.isalnum()) and (len(set(uid)) == 10) and \
        (re.match('(.*[A-Z].*){2}', uid) != None) and \
        (re.match('(.*[0-9].*){3}', uid) != None):
        print("Valid")
    else:
        print("Invalid")

"""Validating Credit Card Numbers


"""

import re

n=int(input())
for _ in range(n):
    cc=input()
    if (re.fullmatch(r"^[456]\d{3}(-?\d{4}){3}$", cc) and \
         not re.search(r"([0-9])(-?\1){3}", cc)):
        print("Valid")
    else:
        print("Invalid")

"""Validating Postal Codes


"""

regex_integer_in_range = r"^[1-1][0-9][0-9][0-9][0-9][0-9]$|^[2-9][0-9][0-9][0-9][0-9][0-9]$"


regex_alternating_repetitive_digit_pair = r"(\d)(?=\d\1)"


import re
P = input()

print (bool(re.match(regex_integer_in_range, P)) 
and len(re.findall(regex_alternating_repetitive_digit_pair, P)) < 2)

"""Matrix Script


"""

#!/bin/python3

import math
import os
import random
import re
import sys
first_multiple_input = input().rstrip().split()

n = int(first_multiple_input[0])

m = int(first_multiple_input[1])

matrix = []

for _ in range(n):
    matrix_item = input()
    matrix.append(matrix_item)
a = list(zip(*matrix))
string = ""
for i in range(len(a)):
    string += "".join(a[i])
pattern = re.compile(r"(?<=\w)[!@#$%& ]{1,}(?=\s*\w)")
new_string = re.sub(pattern," ",string)
print(new_string)

"""#XML

XML 1 - Find the Score
"""

import sys
import xml.etree.ElementTree as etree

def get_attr_number(node):
    attr_number = len(node.attrib)
    for child in node.findall('.//'):
        attr_number += len(child.attrib)
    return attr_number

if __name__ == '__main__':

"""XML2 - Find the Maximum Depth


"""

import xml.etree.ElementTree as etree

maxdepth = 0
def depth(elem, level):
    global maxdepth
    childs =  list(elem.findall("./*"))
 
    if(childs):
       
        level+=1
        maxdepth= max(level+1,1, maxdepth)
        for x in childs:
           depth(x, level)
    else:
        return level

if __name__ == '__main__':

"""#Closures and Decorations

Standardize Mobile Number Using Decorators
"""

def wrapper(f):
  
            lis.append('+91 '+x[-10:-5]+' '+ x[-5:])
        return f(lis)
    return fun

"""Decorators 2 - Name Directory


"""

def person_lister(f):
    def inner(people):
       return map(f, sorted([[*v,k] for k,v in enumerate(people)], key=lambda x:( int(x[-3]), int(x[-1]))))
 
   
    return inner

"""#Numpy

Arrays
"""

import numpy

def arrays(arr):
    arr.reverse()
    return(numpy.array(arr,float))

arr = input().strip().split(' ')

"""Shape and Reshape


"""

import numpy
a=list(map(int,input().split()))
my_array= numpy.array(a)
print(numpy.reshape(my_array,(3,3)))

"""Transpose and Flatten


"""

import numpy
n,m= map(int,input().split())
l=[]
for i in range(n):
    c=map(int,input().split())
    l.append([*c])
my_array=numpy.array(l)
print(numpy.transpose(my_array))
print(my_array.flatten())

"""Concatenate"""

import numpy
n,m,p= map(int,input().split())
l1=[]
l2=[]
for i in range(n):
    c=map(int,input().split())
    l1.append([*c])
    
for i in range(m):
    d=map(int,input().split())
    l2.append([*d]) 
arr1=numpy.array(l1)
arr2=numpy.array(l2)

print(numpy.concatenate((arr1, arr2), axis = 0))

"""Zeros and Ones


"""

import numpy
dim = list(map(int,input().split()))
print(numpy.zeros((dim),dtype = numpy.int))
print(numpy.ones((dim),dtype = numpy.int))

"""Eye and Identity


"""

import numpy
numpy.set_printoptions(legacy='1.13')
n,m= map(int,input().split())
print(numpy.eye(n, m, k = 0))

"""Array Mathematics


"""

import numpy 
n,m = map(int, input().split())
a= []
b= []
for _ in range(n):
    a.append(input().split())
a = numpy.array(a, int)
for _ in range(n):
    b.append(input().split())
b= numpy.array(b, int)


print(numpy.add(a,b))
print(numpy.subtract(a, b))
print(numpy.multiply(a,b))
print(a//b)
print(numpy.mod(a,b))
print(numpy.power(a,b))

"""Floor, Ceil and Rint


"""

import numpy
numpy.set_printoptions(legacy='1.13')
a=list(map(float,input().split()))
arr=numpy.array(a, float)
print(numpy.floor(arr))
print(numpy.ceil(arr))
print(numpy.rint(arr))

"""Sum and Prod


"""

import numpy
n,m= map(int,input().split())
l=[]
for i in range(n):
    l.append(list(map(int,input().split())))

arr=numpy.array(l)
s= numpy.sum(arr,axis=0)
print(numpy.prod(s))

"""Min and Max


"""

import numpy
n,m= map(int,input().split())
l=[]
for i in range(n):
    l.append(list(map(int,input().split())))
arr=numpy.array(l)
mini=numpy.min(arr,axis=1)
print(numpy.max(mini))

"""Mean, Var, and Std"""

import numpy
n,m=map(int,input().split())
l=[]
for i in range(n):
    l.append(list(map(int,input().split())))
    
arr=numpy.array(l)
print(numpy.mean(arr,axis=1))
print(numpy.var(arr,axis=0))
print(round(numpy.std(arr),11))

"""Dot and Cross


"""

import numpy
n= int(input())
a=[]
b=[]
for i in range(n):
    a.append(list(map(int,input().split())))
for i in range(n):
    b.append(list(map(int,input().split())))
arr1=numpy.array(a)
arr2=numpy.array(b)
print(numpy.dot(arr1,arr2))

"""Inner and Outer


"""

import numpy

a=list(map(int,input().split()))
b=list(map(int,input().split()))
arr=numpy.array(a)
arr2=numpy.array(b)
print(numpy.inner(arr,arr2))
print(numpy.outer(arr,arr2))

"""Polynomials"""

import numpy
l=list(map(float, input().split()))
p=int(input())
arr=numpy.array(l)
print(numpy.polyval(arr, p))

"""Linear Algebra


"""

import numpy
n=int(input())
l=[]
for i in range(n):
    l.append(list(map(float,input().split())))
arr=numpy.array(l)
print(round(numpy.linalg.det(arr),2))

"""#Problem 2

Birthday Cake Candles
"""

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'birthdayCakeCandles' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER_ARRAY candles as parameter.
#

def birthdayCakeCandles(candles):
    n= len(candles)
    m=max(candles)
    count=0
    for x in candles:
        if x== m:
            count+=1
    return count

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    candles_count = int(input().strip())

    candles = list(map(int, input().rstrip().split()))

    result = birthdayCakeCandles(candles)

    fptr.write(str(result) + '\n')

    fptr.close()

"""Number Line Jumps


"""

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'kangaroo' function below.
#
# The function is expected to return a STRING.
# The function accepts following parameters:
#  1. INTEGER x1
#  2. INTEGER v1
#  3. INTEGER x2
#  4. INTEGER v2
#

def kangaroo(x1, v1, x2, v2):
    if v1 <= v2:
        return('NO')
    # Write your code here
    while x1 <= x2:
        if x1==x2:
            return('YES')
    
        x1 += v1
        x2 += v2
    return('NO')

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    x1 = int(first_multiple_input[0])

    v1 = int(first_multiple_input[1])

    x2 = int(first_multiple_input[2])

    v2 = int(first_multiple_input[3])

    result = kangaroo(x1, v1, x2, v2)

    fptr.write(result + '\n')

    fptr.close()

"""Viral Advertising


"""

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'viralAdvertising' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER n as parameter.
#

def viralAdvertising(n):
    # Write your code here
    shared=5
    liked=2
    cumulative=2
    for i in range(n-1):
        shared = (shared//2)  * 3
        liked =  shared//2
        cumulative += liked
    return cumulative

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    result = viralAdvertising(n)

    fptr.write(str(result) + '\n')

    fptr.close()

"""Recursive Digit Sum


"""

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'superDigit' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. STRING n
#  2. INTEGER k
#


def superDigit(n, k):
    if(len(n)==1 and k==1):
        return int(n)
    else:
        s=0
        for x in n:
            s+= int(x)
        return superDigit(str(s*k),1)
            
            
            
        
    

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = first_multiple_input[0]

    k = int(first_multiple_input[1])

    result = superDigit(n, k)

    fptr.write(str(result) + '\n')

    fptr.close()

"""Insertion Sort - Part 1


"""

import math
import os
import random
import re
import sys

#
# Complete the 'insertionSort1' function below.
#
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER_ARRAY arr
#

def insertionSort1(n, arr):
    for i in range((n-1),0,-1):
        if arr[i] < arr[i-1]:
            tmp = arr[i]
            arr[i] = arr[i-1]
            print(*arr)
            arr[i-1] = tmp
    print(*arr)

if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    insertionSort1(n, arr)

"""Insertion Sort - Part 2"""

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'insertionSort2' function below.
#
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER_ARRAY arr
#

def insertionSort2(n, arr):
    # Write your code here
    for i in range(1,n):
        for j in range(i):
            if arr[j] > arr[i]:
                arr[i], arr[j] = arr[j], arr[i]
        print(*arr)


if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    insertionSort2(n, arr)